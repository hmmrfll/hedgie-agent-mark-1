# src/tools/telegram_bot.py

import logging
import threading
from typing import Dict, Any, List, Optional, Callable
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode
import asyncio

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_CURRENCY, CHOOSING_DAYS, PROCESSING = range(3)

class TelegramBot:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self, token: str, allowed_user_ids: List[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            allowed_user_ids (List[int], optional): –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
        """
        self.token = token
        self.allowed_user_ids = allowed_user_ids or []
        self.is_running = False
        self.agent = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        self.application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def set_agent(self, agent):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        self.agent = agent
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("analyze", self._analyze_command))
        self.application.add_handler(CommandHandler("status", self._status_command))
        self.application.add_handler(CommandHandler("settings", self._settings_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("analyze", self._analyze_command)],
            states={
                CHOOSING_CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_currency)],
                CHOOSING_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_days)],
            },
            fallbacks=[CommandHandler("cancel", self._cancel_command)],
        )
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._error_handler)
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_user_ids and user_id not in self.allowed_user_ids:
            await update.message.reply_text("‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            f"üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}!</b>\n\n"
            "–Ø —Ç–æ—Ä–≥–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –æ–ø—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
            "üìä <b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [InlineKeyboardButton("üìä –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
            "/analyze - –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "/status - –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /analyze\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (BTC –∏–ª–∏ ETH)\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (14-365)\n"
            "4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞\n\n"
            "<b>–í–æ–ø—Ä–æ—Å—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É:</b>\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- \"–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö\"\n"
            "- \"–û–±—ä—è—Å–Ω–∏ —Å–∏–≥–Ω–∞–ª RSI\"\n"
            "- \"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–≤–µ—Å CALL –æ–ø—Ü–∏–æ–Ω–æ–≤?\""
        )
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def _analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        user_id = update.effective_user.id
        if self.allowed_user_ids and user_id not in self.allowed_user_ids:
            await update.message.reply_text("‚õî –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
        keyboard = [
            [
                InlineKeyboardButton("Bitcoin (BTC)", callback_data="currency_BTC"),
                InlineKeyboardButton("Ethereum (ETH)", callback_data="currency_ETH")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü™ô <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>", 
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        return CHOOSING_CURRENCY
    
    async def _handle_currency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
        currency = update.message.text.upper()
        
        if currency not in ['BTC', 'ETH']:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ BTC –∏–ª–∏ ETH."
            )
            return CHOOSING_CURRENCY
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['currency'] = currency
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = [
            [
                InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data="days_14"),
                InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="days_30")
            ],
            [
                InlineKeyboardButton("60 –¥–Ω–µ–π", callback_data="days_60"),
                InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data="days_90")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (14-365 –¥–Ω–µ–π):</b>",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        
        return CHOOSING_DAYS
    
    async def _handle_days(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
        try:
            days = int(update.message.text)
            
            if not 14 <= days <= 365:
                await update.message.reply_text(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 14 –¥–æ 365. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return CHOOSING_DAYS
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['days'] = days
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            await self._start_analysis(update, context)
            
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 365."
            )
            return CHOOSING_DAYS
    
    async def _start_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        currency = context.user_data.get('currency')
        days = context.user_data.get('days')
        
        if not currency or not days:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        await update.message.reply_text(
            f"üîÑ <b>–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {currency} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...</b>\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        threading.Thread(
            target=self._run_analysis_thread,
            args=(update.effective_chat.id, currency, days)
        ).start()
    
    def _run_analysis_thread(self, chat_id, currency, days):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not self.agent:
                self._send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                return
                    
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∞–≥–µ–Ω—Ç–∞
            results = self.agent.process_trades_for_telegram(currency, days)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            if results and results.get('status') == 'success':
                self._send_message(
                    chat_id, 
                    "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
                    parse_mode=ParseMode.HTML
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                self._send_analysis_report(chat_id, results.get('recommendations', {}))
                
                # –î–æ–±–∞–≤–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
                self._send_message(
                    chat_id,
                    "üëÜ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É:</b>\n\n"
                    "‚Ä¢ –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI?\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?\n"
                    "‚Ä¢ –ü–æ—á–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å?\n"
                    "‚Ä¢ –ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ CALL/PUT?\n\n"
                    "–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Llama –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
                    parse_mode=ParseMode.HTML
                )
            else:
                self._send_message(
                    chat_id, 
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self._send_message(
                chat_id, 
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"
            )
    
    async def _cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        context.user_data.clear()
        await update.message.reply_text(
            "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        )
        return ConversationHandler.END
    
    async def _button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if callback_data == "new_analysis":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É analyze
            await self._analyze_command(update, context)
            
        elif callback_data == "help":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            await query.edit_message_text(text="–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ...")
            await self._help_command(update, context)
            
        elif callback_data == "cancel":
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            context.user_data.clear()
            await query.edit_message_text(
                text="‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
            )
            return ConversationHandler.END
            
        elif callback_data.startswith("currency_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            currency = callback_data.split("_")[1]
            context.user_data['currency'] = currency
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            keyboard = [
                [
                    InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data="days_14"),
                    InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="days_30")
                ],
                [
                    InlineKeyboardButton("60 –¥–Ω–µ–π", callback_data="days_60"),
                    InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data="days_90")
                ],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text=f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency}\n\nüìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>",
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
            
            return CHOOSING_DAYS
            
        elif callback_data.startswith("days_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            days = int(callback_data.split("_")[1])
            context.user_data['days'] = days
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
            await query.edit_message_text(
                text=f"üîÑ <b>–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {context.user_data.get('currency')} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...</b>\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
                parse_mode=ParseMode.HTML
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=self._run_analysis_thread,
                args=(update.effective_chat.id, context.user_data.get('currency'), days)
            ).start()
            
            return ConversationHandler.END
    
    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.agent:
            await update.message.reply_text("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return
            
        state = self.agent.state
        
        status_text = (
            f"<b>üìä –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞:</b>\n\n"
            f"‚Ä¢ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–Ω–∞–ª–∏–∑–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        memory = self.agent.memory.get_context()
        if memory:
            currency = memory.get('currency')
            days = memory.get('days')
            timestamp = memory.get('timestamp')
            
            if currency and days and timestamp:
                status_text += (
                    f"\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑:</b>\n"
                    f"‚Ä¢ –í–∞–ª—é—Ç–∞: {currency}\n"
                    f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {timestamp}\n"
                )
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)
    
    async def _settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        settings_text = (
            "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞:</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîç –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏", callback_data="settings_detail")],
            [InlineKeyboardButton("‚ö†Ô∏è –ü–æ—Ä–æ–≥ —Ä–∏—Å–∫–∞", callback_data="settings_risk")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            settings_text, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        message_text = update.message.text.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–µ–º
        if "–æ–ø—Ü–∏–æ–Ω–Ω" in message_text and "—Å—Ç—Ä–∞—Ç–µ–≥" in message_text:
            await self._explain_option_strategies(update, context)
        elif "call" in message_text and ("–ø–µ—Ä–µ–≤–µ—Å" in message_text or "–ø—Ä–µ–≤—ã—à–∞" in message_text):
            await self._explain_call_dominance(update, context)
        elif "rsi" in message_text:
            await self._explain_rsi(update, context)
        elif "—Ä–∏—Å–∫" in message_text:
            await self._explain_risk(update, context)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            analysis_data = {}
            if self.agent:
                memory = self.agent.memory.get_context()
                if 'recommendations' in memory and 'recommendations' in memory['recommendations']:
                    analysis_data = memory['recommendations']['recommendations']
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if not analysis_data:
                await update.message.reply_text(
                    "ü§î –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /analyze."
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            await update.message.chat.send_action(action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Ollama –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def get_ollama_answer():
                return self.agent.tools.ask_ollama(update.message.text, analysis_data)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            loop = asyncio.get_event_loop()
            answer = await loop.run_in_executor(None, get_ollama_answer)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(answer)

    async def _explain_option_strategies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        strategies_text = (
            "<b>üìö –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n\n"
            "‚Ä¢ <b>Single Trade</b> - –ü—Ä–æ—Å—Ç–∞—è –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –æ–¥–Ω–æ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞. –û—Ç—Ä–∞–∂–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Ç–∞–≤–∫—É –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã.\n\n"
            "‚Ä¢ <b>Call Spread</b> - –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ CALL –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞–π–∫–∞–º–∏. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –∏ –ø—Ä–∏–±—ã–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ –±—ã—á—å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ.\n\n"
            "‚Ä¢ <b>Put Spread</b> - –ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ PUT –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞–π–∫–∞–º–∏. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –∏ –ø—Ä–∏–±—ã–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ –º–µ–¥–≤–µ–∂—å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ.\n\n"
            "‚Ä¢ <b>Risk Reversal</b> - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ PUT –∏ –ø–æ–∫—É–ø–∫–∏ CALL (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç). –û—Ç—Ä–∞–∂–∞–µ—Ç —Å–∏–ª—å–Ω—É—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É.\n\n"
            "‚Ä¢ <b>Straddle</b> - –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ CALL –∏ PUT –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å—Ç—Ä–∞–π–∫–æ–º. –°—Ç–∞–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.\n\n"
            "‚Ä¢ <b>Iron Condor</b> - –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–ø—Ä–µ–¥–æ–≤. –ü—Ä–∏–±—ã–ª—å–Ω–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.\n\n"
            "<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b> –ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º Call Spread –≥–æ–≤–æ—Ä–∏—Ç –æ–± —É–º–µ—Ä–µ–Ω–Ω–æ –±—ã—á—å–∏—Ö –æ–∂–∏–¥–∞–Ω–∏—è—Ö."
        )
        
        await update.message.reply_text(strategies_text, parse_mode=ParseMode.HTML)
    
    async def _explain_call_dominance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏—è CALL –æ–ø—Ü–∏–æ–Ω–æ–≤"""
        call_text = (
            "<b>üìà –ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ CALL –æ–ø—Ü–∏–æ–Ω–æ–≤:</b>\n\n"
            "–ö–æ–≥–¥–∞ –æ–±—ä–µ–º CALL –æ–ø—Ü–∏–æ–Ω–æ–≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—ä–µ–º PUT, —ç—Ç–æ –æ–±—ã—á–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ <b>–±—ã—á—å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</b> —Ä—ã–Ω–∫–∞.\n\n"
            "<b>–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:</b>\n"
            "‚Ä¢ –¢—Ä–µ–π–¥–µ—Ä—ã –æ–∂–∏–¥–∞—é—Ç —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ CALL –æ–ø—Ü–∏–æ–Ω–æ–≤ –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–º–∏—é –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –∞–∫—Ç–∏–≤ –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ–π —Ü–µ–Ω–µ\n"
            "‚Ä¢ –í—ã—Å–æ–∫–∏–π CALL/PUT ratio (>1.5) —á–∞—Å—Ç–æ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–º –æ–ø—Ç–∏–º–∏–∑–º–µ\n\n"
            "<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞–∂–µ–Ω:</b> –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–∂–µ –¥–µ–ª—å—Ç—É –ø–æ–∑–∏—Ü–∏–π, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–π–∫–æ–≤ –∏ —Å—Ä–æ–∫–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã."
        )
        
        await update.message.reply_text(call_text, parse_mode=ParseMode.HTML)
    
    async def _explain_rsi(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ RSI"""
        rsi_text = (
            "<b>üìä –ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã (RSI):</b>\n\n"
            "RSI - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∏–∑–º–µ—Ä—è—é—â–∏–π —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π. –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 0 –¥–æ 100.\n\n"
            "<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ <b>RSI > 70</b>: –∞–∫—Ç–∏–≤ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω—ã–º (–≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑)\n"
            "‚Ä¢ <b>RSI < 30</b>: –∞–∫—Ç–∏–≤ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–º (–≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö)\n"
            "‚Ä¢ <b>RSI = 50</b>: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "<b>–°–∏–≥–Ω–∞–ª—ã:</b>\n"
            "‚Ä¢ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –º–µ–∂–¥—É RSI –∏ —Ü–µ–Ω–æ–π\n"
            "‚Ä¢ –ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (50)\n"
            "‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ —Å–∞–º–æ–º RSI\n\n"
            "–í–∞–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RSI –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –æ–±—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ —Ä—ã–Ω–∫–∞."
        )
        
        await update.message.reply_text(rsi_text, parse_mode=ParseMode.HTML)
    
    async def _explain_risk(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤"""
        risk_text = (
            "<b>‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –∏ VaR:</b>\n\n"
            "Value at Risk (VaR) - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é.\n\n"
            "<b>–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:</b>\n"
            "‚Ä¢ <b>VaR 95%</b>: —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 95% –≤–∞—à–∏ –ø–æ—Ç–µ—Ä–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å—è—Ç —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è\n"
            "‚Ä¢ <b>–í—ã—Å–æ–∫–∏–π VaR</b>: —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ <b>–ù–∏–∑–∫–∏–π VaR</b>: —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–µ–π:</b>\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∏—Å–∫–∞\n"
            "‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∞\n"
            "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å (R/R) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1:2 –¥–ª—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n"
            "–ü–æ–º–Ω–∏—Ç–µ: –Ω–∏–∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞—ë—Ç 100% –≥–∞—Ä–∞–Ω—Ç–∏–∏, –≤—Å–µ–≥–¥–∞ —Ä–∏—Å–∫—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç–µ—Ä—è—Ç—å."
        )
        
        await update.message.reply_text(risk_text, parse_mode=ParseMode.HTML)
    
    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {context.error}")
    
    def _send_message(self, chat_id, text, parse_mode=None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞"""
        if parse_mode is None:
            parse_mode = ParseMode.HTML
            
        asyncio.run(self._send_message_async(chat_id, text, parse_mode))
    
    async def _send_message_async(self, chat_id, text, parse_mode=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        bot = Bot(token=self.token)
        try:
            await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _send_analysis_report(self, chat_id, analysis_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
            currency = analysis_data.get('currency', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞')
            current_price = analysis_data.get('current_price', '0')
            recommendation = analysis_data.get('recommendation', '–ù/–î')
            risk_level = analysis_data.get('risk_level', '–ù/–î')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            report = f"<b>üîç –û–ü–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó: {currency} ${current_price}</b>\n\n"
            
            # ======= –ë–õ–û–ö –û–ü–¶–ò–û–ù–û–í (–†–ê–°–®–ò–†–ï–ù–ù–´–ô) =======
            report += "<b>üîÑ –ê–ù–ê–õ–ò–ó –û–ü–¶–ò–û–ù–û–í –ò –ë–õ–û–ß–ù–´–• –°–î–ï–õ–û–ö:</b>\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ü–∏–æ–Ω–æ–≤
            calls_count = analysis_data.get('calls_count', '–ù/–î')
            puts_count = analysis_data.get('puts_count', '–ù/–î')
            call_volume = analysis_data.get('call_volume', '–ù/–î')
            put_volume = analysis_data.get('put_volume', '–ù/–î')
            call_put_ratio = analysis_data.get('call_put_ratio', '–ù/–î')
            
            report += f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>{analysis_data.get('total_trades', '–ù/–î')}</b>\n"
            report += f"‚Ä¢ CALL –æ–ø—Ü–∏–æ–Ω–æ–≤: <b>{calls_count}</b> (–æ–±—ä–µ–º {call_volume})\n"
            report += f"‚Ä¢ PUT –æ–ø—Ü–∏–æ–Ω–æ–≤: <b>{puts_count}</b> (–æ–±—ä–µ–º {put_volume})\n"
            report += f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ CALL/PUT: <b>{call_put_ratio}</b>\n"
            report += f"‚Ä¢ –û–±—â–∞—è –¥–µ–ª—å—Ç–∞: <b>{analysis_data.get('total_delta', '–ù/–î')}</b> üîë\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞
            self._send_message(chat_id, report)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å - —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            report2 = "<b>üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–ü–¶–ò–û–ù–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô:</b>\n"
            strategies_data = analysis_data.get('strategies_data', {})
            if strategies_data:
                total_volume = sum(strategies_data.values())
                for strategy, volume in sorted(strategies_data.items(), key=lambda x: x[1], reverse=True)[:5]:
                    percentage = (volume/total_volume*100) if total_volume > 0 else 0
                    report2 += f"‚Ä¢ <b>{strategy}</b>: {volume:.2f} ({percentage:.1f}%)\n"
            else:
                report2 += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
                
            # –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Å–¥–µ–ª–∫–∏
            report2 += "\n<b>üíº –ö–†–£–ü–ù–ï–ô–®–ò–ï –°–î–ï–õ–ö–ò:</b>\n"
            largest_trades = analysis_data.get('largest_trades', [])
            if largest_trades:
                for i, trade in enumerate(largest_trades[:5], 1):
                    trade_type = trade.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    trade_amount = trade.get('amount', 0)
                    trade_id = trade.get('trade_id', '–ù/–î')
                    report2 += f"‚Ä¢ #{i}: <b>{trade_type}</b> - –æ–±—ä–µ–º {trade_amount:.2f} (ID: {trade_id})\n"
            else:
                report2 += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª –æ—Ç –æ–ø—Ü–∏–æ–Ω–æ–≤
            option_sentiment = analysis_data.get('option_sentiment', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ')
            report2 += f"\n<b>üì£ –°–ò–ì–ù–ê–õ –ü–û –û–ü–¶–ò–û–ù–ê–ú:</b> <u>{option_sentiment}</u>\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
            self._send_message(chat_id, report2)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å - –æ–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            report3 = f"<b>üéØ –û–ë–©–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {recommendation}</b>\n"
            report3 += f"<b>‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level}\n\n"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            report3 += "<b>üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>\n"
            report3 += f"‚Ä¢ –¢—Ä–µ–Ω–¥: {analysis_data.get('trend', '–ù/–î')}\n"
            report3 += f"‚Ä¢ RSI: {analysis_data.get('rsi_value', '–ù/–î')} ({analysis_data.get('rsi_signal', '–ù/–î')})\n"
            report3 += f"‚Ä¢ –°–∏–≥–Ω–∞–ª: {analysis_data.get('technical_signal', '–ù/–î')}\n\n"
            
            # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            report3 += "<b>üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>\n"
            report3 += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {analysis_data.get('position_size', '–ù/–î')}% –∫–∞–ø–∏—Ç–∞–ª–∞\n"
            report3 += f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: ${analysis_data.get('stop_loss_price', '–ù/–î')} ({analysis_data.get('stop_loss_percent', '–ù/–î')}%)\n"
            report3 += f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${analysis_data.get('take_profit_price', '–ù/–î')} ({analysis_data.get('take_profit_percent', '–ù/–î')}%)\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å
            self._send_message(chat_id, report3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            conclusion = analysis_data.get('conclusion', '')
            if conclusion:
                conclusion_msg = "<b>üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –ü–†–û–ì–ù–û–ó:</b>\n\n" + conclusion
                # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(conclusion_msg) > 4000:
                    conclusion_msg = conclusion_msg[:3997] + "..."
                
                self._send_message(chat_id, conclusion_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
            self._send_message(
                chat_id,
                "üëÜ <b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É.</b>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö\n"
                "‚Ä¢ –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–≤–µ—Å CALL –æ–ø—Ü–∏–æ–Ω–æ–≤?\n"
                "‚Ä¢ –û–±—ä—è—Å–Ω–∏ —Å–∏–≥–Ω–∞–ª RSI\n"
                "‚Ä¢ –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞?\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
            )
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            self._send_message(
                chat_id, 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
            )
            return False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.is_running:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            threading.Thread(
                target=self._run_bot,
                daemon=True
            ).start()
            self.is_running = True
    
    def _run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.application.run_polling()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.is_running:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            self.application.stop()
            self.is_running = False