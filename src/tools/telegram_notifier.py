# src/tools/telegram_notifier.py

import asyncio
import logging
from typing import Dict, Any, List, Optional
from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, token: str, chat_ids: List[str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

        Args:
            token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_ids (List[str]): –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.token = token
        self.chat_ids = chat_ids
        self.bot = Bot(token=token)

    async def _send_message_async(self, chat_id, text, parse_mode=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def send_message(self, message: str, parse_mode=None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        Args:
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        if parse_mode is None:
            parse_mode = ParseMode.HTML

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            for chat_id in self.chat_ids:
                loop.run_until_complete(self._send_message_async(chat_id, message, parse_mode))

            loop.close()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False

    def send_analysis_report(self, analysis_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞

        Args:
            analysis_data (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–Ω–∞—á–µ False
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
            currency = analysis_data.get('currency', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞')
            current_price = analysis_data.get('current_price', '0')
            recommendation = analysis_data.get('recommendation', '–ù/–î')
            risk_level = analysis_data.get('risk_level', '–ù/–î')

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            report = f"<b>üîç –û–ü–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó: {currency} ${current_price}</b>\n\n"

            # ======= –ë–õ–û–ö –û–ü–¶–ò–û–ù–û–í (–†–ê–°–®–ò–†–ï–ù–ù–´–ô) =======
            report += "<b>üîÑ –ê–ù–ê–õ–ò–ó –û–ü–¶–ò–û–ù–û–í –ò –ë–õ–û–ß–ù–´–• –°–î–ï–õ–û–ö:</b>\n"

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ü–∏–æ–Ω–æ–≤
            calls_count = analysis_data.get('calls_count', '–ù/–î')
            puts_count = analysis_data.get('puts_count', '–ù/–î')
            call_volume = analysis_data.get('call_volume', '–ù/–î')
            put_volume = analysis_data.get('put_volume', '–ù/–î')
            call_put_ratio = analysis_data.get('call_put_ratio', '–ù/–î')

            report += f"‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: <b>{analysis_data.get('total_trades', '–ù/–î')}</b>\n"
            report += f"‚Ä¢ CALL –æ–ø—Ü–∏–æ–Ω–æ–≤: <b>{calls_count}</b> (–æ–±—ä–µ–º {call_volume})\n"
            report += f"‚Ä¢ PUT –æ–ø—Ü–∏–æ–Ω–æ–≤: <b>{puts_count}</b> (–æ–±—ä–µ–º {put_volume})\n"
            report += f"‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ CALL/PUT: <b>{call_put_ratio}</b>\n"
            report += f"‚Ä¢ –û–±—â–∞—è –¥–µ–ª—å—Ç–∞: <b>{analysis_data.get('total_delta', '–ù/–î')}</b> üîë\n\n"

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π - –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å
            report += "<b>üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–ü–¶–ò–û–ù–ù–´–• –°–¢–†–ê–¢–ï–ì–ò–ô:</b>\n"
            strategies_data = analysis_data.get('strategies_data', {})
            if strategies_data:
                for strategy, volume in sorted(strategies_data.items(), key=lambda x: x[1], reverse=True)[:5]:
                    total_volume = sum(strategies_data.values())
                    percentage = (volume/total_volume*100) if total_volume > 0 else 0
                    report += f"‚Ä¢ <b>{strategy}</b>: {volume:.2f} ({percentage:.1f}%)\n"
            else:
                report += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

            # –ö—Ä—É–ø–Ω–µ–π—à–∏–µ —Å–¥–µ–ª–∫–∏ - –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
            report += "\n<b>üíº –ö–†–£–ü–ù–ï–ô–®–ò–ï –°–î–ï–õ–ö–ò:</b>\n"
            largest_trades = analysis_data.get('largest_trades', [])
            if largest_trades:
                for i, trade in enumerate(largest_trades[:5], 1):
                    trade_type = trade.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    trade_amount = trade.get('amount', 0)
                    trade_id = trade.get('trade_id', '–ù/–î')
                    report += f"‚Ä¢ #{i}: <b>{trade_type}</b> - –æ–±—ä–µ–º {trade_amount:.2f} (ID: {trade_id})\n"
            else:
                report += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–≥–Ω–∞–ª –æ—Ç –æ–ø—Ü–∏–æ–Ω–æ–≤
            option_sentiment = analysis_data.get('option_sentiment', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ')
            report += f"\n<b>üì£ –°–ò–ì–ù–ê–õ –ü–û –û–ü–¶–ò–û–ù–ê–ú:</b> <u>{option_sentiment}</u>\n\n"

            # ======= –ö–õ–Æ–ß–ï–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø =======
            report += f"<b>üéØ –û–ë–©–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {recommendation}</b>\n"
            report += f"<b>‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> {risk_level}\n\n"

            # ======= –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–°–û–ö–†–ê–©–ï–ù–ù–´–ô) =======
            report += "<b>üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b>\n"
            report += f"‚Ä¢ –¢—Ä–µ–Ω–¥: {analysis_data.get('trend', '–ù/–î')}\n"
            report += f"‚Ä¢ RSI: {analysis_data.get('rsi_value', '–ù/–î')} ({analysis_data.get('rsi_signal', '–ù/–î')})\n"
            report += f"‚Ä¢ –°–∏–≥–Ω–∞–ª: {analysis_data.get('technical_signal', '–ù/–î')}\n\n"

            # ======= –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ (–°–û–ö–†–ê–©–ï–ù–ù–´–ô) =======
            report += "<b>üõ°Ô∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç:</b>\n"
            report += f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {analysis_data.get('position_size', '–ù/–î')}% –∫–∞–ø–∏—Ç–∞–ª–∞\n"
            report += f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: ${analysis_data.get('stop_loss_price', '–ù/–î')} ({analysis_data.get('stop_loss_percent', '–ù/–î')}%)\n"
            report += f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${analysis_data.get('take_profit_price', '–ù/–î')} ({analysis_data.get('take_profit_percent', '–ù/–î')}%)\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
            success = self.send_message(report, ParseMode.HTML)
            if not success:
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            conclusion = analysis_data.get('conclusion', '')
            if conclusion:
                conclusion_msg = "<b>üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –ü–†–û–ì–ù–û–ó:</b>\n\n" + conclusion
                # –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                if len(conclusion_msg) > 4000:
                    conclusion_msg = conclusion_msg[:3997] + "..."

                return self.send_message(conclusion_msg, ParseMode.HTML)

            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram: {e}")
            return False
